/* Create name for animation - '0%' is start position of animation, '100%' is ending position - can do somethign at any position i.e. XX% */
/* translateX animates on X axis with -100px on left */
/* translate(0) to go back to original position, normal look */
/* Positive values move forward, negative values move backwards just how you would think */
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInButton {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  font-size: 62.5%; }

body {
  box-sizing: border-box; }

body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #FFF;
  text-transform: uppercase;
  /* entire element moves in animation, this property determines if back part of animated element is visible or hidden */
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* 
    animation-delay: 3s;
    animation-iteration-count: 3; 
    */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out; }

/* 
since .btn is an anchor element, set display to inline-block so we can adjust padding etc -- do to any inline element you want to control
transition property is set on initial state
basically saying, it will transition like this at this speed
you put the transform on the pseduo selector -- i.e. move up 3px then translate tells you how fast
*/
.btn:link, .btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  border-radius: 10rem;
  transition: all .2s;
  position: relative;
  font-size: 1.6rem; }

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }

.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn--white {
  background-color: #FFF;
  color: #777; }

.btn--animated {
  animation: moveInButton 1.5s ease-out .75s;
  animation-fill-mode: backwards; }

/*
have to make a copy of element you are trying to make effect for
poition it to be directly behind with absolute positioning
element has to be same color
add transformation in hover
*/
/* .btn::after {
  content: "";
  display: inline-block;
  width: 100%;
  height: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all .2s;
}

.btn-white::after {
  background-color: #FFF;
}

.btn:hover::after {
  transform: scale(1.2);
  opacity: 0;;
} */
.row {
  max-width: 114rem;
  background-color: #EEE;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    background-color: red;
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - (2 * 6rem)) / 3); }
  .row .col-2-of-3 {
    width: calc((2 * (100% - (2 * 6rem)) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - (3 * 6rem)) / 4); }
  .row .col-2-of-4 {
    width: calc((2 * (100% - (3 * 6rem)) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc((3 * (100% - (3 * 6rem)) / 4) + (2 * 6rem)); }

/* add background gradient with 'background-image' property  */
/* polygon clip goes in order top left, top right, bottom right, bottom left -- all along X and Y axis */
/* use Clippy tool to create coordinates for you */
.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  position: relative;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center; }
